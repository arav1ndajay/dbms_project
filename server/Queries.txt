
// Assignment: 	DBMS Project
-------------------------------------START---------------------------------------------------------


// Creating tables for entities

CREATE TABLE GuestHouse 
(GHID VARCHAR(20) PRIMARY KEY, GHName VARCHAR(30), Location VARCHAR(30), Capacity INT);

CREATE TABLE Room (RoomID VARCHAR(20) PRIMARY KEY, Rent INT, Category CHAR(1));

// Category: X - 1 BHK, Y - 2 BHK, Z - 3 BHK

CREATE TABLE Guest (GID VARCHAR(20) PRIMARY KEY, GName VARCHAR(30), ContactNum VARCHAR(11), DOB DATE, Email VARCHAR(50));

CREATE TABLE Staff (STID VARCHAR(20) PRIMARY KEY, STName VARCHAR(30), ContactNum VARCHAR(11), DOB DATE, Email VARCHAR(50), SType VARCHAR(20));

CREATE TABLE Food (FID VARCHAR(20) PRIMARY KEY, FName VARCHAR(50), Price FLOAT(2));

CREATE TABLE Admin (AID VARCHAR(20) PRIMARY KEY, AName VARCHAR(30), ContactNum VARCHAR(11), DOB DATE, Email VARCHAR(50));

CREATE TABLE FoodBookings (FBID VARCHAR(20) PRIMARY KEY, GID VARCHAR(20), FID VARCHAR(20), FName VARCHAR(50), Quantity INT, OrderPrice INT, DateOfOrder DATE, PaymentStatus BOOLEAN DEFAULT false,
FOREIGN KEY(GID) REFERENCES Guest(GID), FOREIGN KEY(FID) REFERENCES Food(FID));

// Amrades stuff

CREATE TABLE Customer (CID VARCHAR(20) PRIMARY KEY, CName VARCHAR(30), ContactNum VARCHAR(11), DOB DATE, Email VARCHAR(50));

CREATE TABLE Shopkeeper (SKID VARCHAR(20) PRIMARY KEY, SKName VARCHAR(30), ContactNum VARCHAR(11), DOB DATE, Email VARCHAR(50));

CREATE TABLE Shop(
    SHID VARCHAR(20) NOT NULL PRIMARY KEY,
    shopArea VARCHAR(20),
    Rent INT,
    TotalSales INT DEFAULT 0
);

CREATE TABLE ShopOwnership(
    SKID VARCHAR(20),
    SHID VARCHAR(20),
    LicensePeriod INT,
    ExtensionPeriod INT DEFAULT 0,
    tenureDate DATE,
    ExtensionRequested BOOLEAN DEFAULT false,
    FOREIGN KEY (SKID) REFERENCES Shopkeeper(SKID),
    FOREIGN KEY (SHID) REFERENCES Shop(SHID)
);

CREATE TABLE ItemsInShop(
    ItemID VARCHAR(20) PRIMARY KEY,
    SHID VARCHAR(20),
    ItemName VARCHAR(50),
    Price INT,
    ExpiryDate DATE,
    FOREIGN KEY (SHID) REFERENCES shopownership(SHID)
);

CREATE TABLE ShopReceipt
(SRID VARCHAR(20) PRIMARY KEY, CID VARCHAR(20), SHID VARCHAR(20), ItemID VARCHAR(20), PurchaseDate DATE, Quantity INT, Cost INT, 
FOREIGN KEY (CID) REFERENCES Customer(CID), FOREIGN KEY (SHID) REFERENCES Shopownership(SHID), FOREIGN KEY (ItemID) REFERENCES itemsinshop(ItemID));

CREATE TABLE FeedbackQuestions
(Q1 VARCHAR(255), Q2 VARCHAR(255), Q3 VARCHAR(255));

CREATE TABLE Feedback 
(FDID VARCHAR(20) PRIMARY KEY, CID VARCHAR(20), SHID VARCHAR(20), 
R1 INT, R2 INT, R3 INT, Comments VARCHAR(255),
FOREIGN KEY (CID) REFERENCES Customer(CID), FOREIGN KEY (SHID) REFERENCES Shopownership(SHID));

// Sinan stuff
CREATE TABLE Gardener (GDID VARCHAR(20) PRIMARY KEY, GDName VARCHAR(30), ContactNum VARCHAR(11), DOB DATE, Email VARCHAR(50));

CREATE TABLE Gattendance (GDID VARCHAR(20), Ready_Time INT, DateOfWork DATE, FOREIGN KEY (GDID) REFERENCES Gardener(GDID));

CREATE TABLE Area (ARID VARCHAR(20) PRIMARY KEY, time INT, type VARCHAR(20));

CREATE TABLE Request (ARID VARCHAR(20) PRIMARY KEY, DateOfRequest DATE, rem_time INT, FOREIGN KEY(ARID) REFERENCES Area(ARID));

CREATE TABLE Duty (DateOfDuty DATE, GDID VARCHAR(20), ARID VARCHAR(20), dutyTime INT,Status CHAR(1),
FOREIGN KEY(ARID) REFERENCES Area(ARID), FOREIGN KEY(GDID) REFERENCES Gardener(GDID));

CREATE TABLE Duty_history LIKE Duty;

CREATE TABLE Work8 (GDID varchar(20), Ready_Time int, FOREIGN KEY(GDID) REFERENCES Gardener(GDID));

create table Completed_request(DateofComplete date, ARID varchar(20), FOREIGN KEY(ARID) REFERENCES Area(ARID));

CREATE TABLE Tool(TID VARCHAR(20) PRIMARY KEY, TName VARCHAR(20), Status CHAR(1) DEFAULT "A");
// Available: A, Used for work: W, Under repair: R

CREATE TABLE ToolRepairing (TID VARCHAR(20), MID VARCHAR(20), DateStarted DATE,
FOREIGN KEY(TID) REFERENCES Tool(TID), FOREIGN KEY(MID) REFERENCES Mechanic(MID));

CREATE TABLE ToolRepairHistory (TRID VARCHAR(20) PRIMARY KEY, TID VARCHAR(20), MID VARCHAR(20), DateFinished DATE, Amount INT, PaymentStatus BOOLEAN DEFAULT false,
FOREIGN KEY(TID) REFERENCES Tool(TID), FOREIGN KEY(MID) REFERENCES Mechanic(MID));

CREATE TABLE ToolUsing (TID VARCHAR(20), GDID VARCHAR(20), DateUse DATE, FOREIGN KEY(TID) REFERENCES Tool(TID), 
FOREIGN KEY(GDID) REFERENCES Gardener(GDID));
---------------------------------------------------------------------------------------------------
// Table for users

CREATE TABLE Users (UID INT AUTO_INCREMENT PRIMARY KEY, Email VARCHAR(50), Role VARCHAR(20), Password VARCHAR(255));

To insert, use: INSERT INTO users (Email, Role, Password) VALUES ('a@gmail.com', 'tenant', 'hehe');

---------------------------------------------------------------------------------------------------
// Creating tables for relations

CREATE TABLE StaffDutyRoster 
(Date DATE, GHID VARCHAR(20), Shift_1 VARCHAR(20), Shift_2 VARCHAR(20), PRIMARY KEY(Date, GHID),
FOREIGN KEY (GHID) REFERENCES Guesthouse(GHID));

CREATE TABLE StaffDutyLog LIKE StaffDutyRoster;

CREATE TABLE roomOf 
(RoomID VARCHAR(20), GHID VARCHAR(20), FOREIGN KEY (RoomID) REFERENCES Room(RoomID), 
FOREIGN KEY (GHID) REFERENCES GuestHouse(GHID));

CREATE TABLE Receipt ();

CREATE TABLE RoomBookings (RBID VARCHAR(20) PRIMARY KEY, RoomID VARCHAR(20), 
GID VARCHAR(20), DateOfBooking DATE, ApprovalStatus CHAR(1) DEFAULT "P", StartDate DATE, EndDate DATE, Price INT,
FOREIGN KEY (RoomID) REFERENCES Room(RoomID), FOREIGN KEY (GID) REFERENCES Guest(GID));

// Approval status: P for pending, A for approved


CREATE TABLE ShopRentPayment(
    PayID VARCHAR(20),
    SKID VARCHAR(20),
    deposit INT,
    depositDate DATE,
    FOREIGN KEY (SKID) references Shopkeeper(SKID)
);
---------------------------------------------------------------------------------------------------
// 5 relevant queries for the tables

// Guesthouse table

INSERT INTO GuestHouse VALUES 
('GH100', 'Mercury', 'Abc', 40),
('GH200', 'Venus', 'Def', 60),
('GH300', 'Mars', 'Ghi', 50),
('GH400', 'Saturn', 'Jkl', 55),
('GH500', 'Jupiter', 'Mno', 75);

// roomOf
INSERT INTO roomOf VALUES
('R01', 'GH100'),
('R02', 'GH100'),
('R03', 'GH100'),
('R04', 'GH100'),
('R05', 'GH100'),
('R06', 'GH100');

// Room table
INSERT INTO Room VALUES
('R01', 1000, 'X'),
('R02', 2000, 'Y'),
('R03', 3000, 'Z'),
('R04', 4000, 'X'),
('R05', 5000, 'Y'),
('R06', 6000, 'Z');

// Person table
INSERT INTO Person VALUES
('G101', 'A', '9876543219', '1995-01-01'),
('G102', 'B', '9876543218', '1996-02-02'),
('G103', 'C', '9876543217', '1997-03-03'),
('G104', 'D', '9876543216', '1998-04-04'),
('G105', 'E', '9876543215', '1999-05-05');

// RoomBookings table (this is where new bookings will come)
INSERT INTO roombookings (RoomID, GID, DateOfBooking, StartDate, EndDate) VALUES 
('R01', 'G101', '2021-01-01', '2021-02-02', '2021-03-01');

// Feature to print receipt??
---------------------------------------------------------------------------------------------------
Triggers
==========

// Trigger for auto generating new guest ID

DELIMITER $$

CREATE TRIGGER before_guest_insert
BEFORE INSERT
ON guest 
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(GID), 2, 3) AS UNSIGNED) INTO nextID FROM Guest;
	
	IF nextID IS NULL
	THEN SET NEW.GID = CONCAT("G", 100);
	ELSE SET NEW.GID = CONCAT("G", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new gardener ID

DELIMITER $$

CREATE TRIGGER before_gardener_insert
BEFORE INSERT
ON gardener
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(GDID), 3, 3) AS UNSIGNED) INTO nextID FROM Gardener;
	
	IF nextID IS NULL
	THEN SET NEW.GDID = CONCAT("GD", 100);
	ELSE SET NEW.GDID = CONCAT("GD", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new mechanic ID

DELIMITER $$

CREATE TRIGGER before_mechanic_insert
BEFORE INSERT
ON mechanic
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(MID), 2, 3) AS UNSIGNED) INTO nextID FROM Mechanic;
	
	IF nextID IS NULL
	THEN SET NEW.MID = CONCAT("M", 100);
	ELSE SET NEW.MID = CONCAT("M", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new staff ID

DELIMITER $$

CREATE TRIGGER before_staff_insert
BEFORE INSERT
ON staff
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(STID), 3, 3) AS UNSIGNED) INTO nextID FROM Staff;
	
	IF nextID IS NULL
	THEN SET NEW.STID = CONCAT("ST", 100);
	ELSE SET NEW.STID = CONCAT("ST", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new customer ID

DELIMITER $$

CREATE TRIGGER before_customer_insert
BEFORE INSERT
ON customer
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(CID), 2, 3) AS UNSIGNED) INTO nextID FROM Customer;
	
	IF nextID IS NULL
	THEN SET NEW.CID = CONCAT("C", 100);
	ELSE SET NEW.CID = CONCAT("C", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new shopkeeper ID

DELIMITER $$

CREATE TRIGGER before_shopkeeper_insert
BEFORE INSERT
ON shopkeeper
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(SKID), 3, 3) AS UNSIGNED) INTO nextID FROM Shopkeeper;
	
	IF nextID IS NULL
	THEN SET NEW.SKID = CONCAT("SK", 100);
	ELSE SET NEW.SKID = CONCAT("SK", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new admin ID

DELIMITER $$

CREATE TRIGGER before_admin_insert
BEFORE INSERT
ON admin
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(AID), 2, 3) AS UNSIGNED) INTO nextID FROM Admin;
	
	IF nextID IS NULL
	THEN SET NEW.AID = CONCAT("A", 100);
	ELSE SET NEW.AID = CONCAT("A", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new Food ID

DELIMITER $$

CREATE TRIGGER before_food_insert
BEFORE INSERT
ON food
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(FID), 2, 3) AS UNSIGNED) INTO nextID FROM Food;
	
	IF nextID IS NULL
	THEN SET NEW.FID = CONCAT("F", 100);
	ELSE SET NEW.FID = CONCAT("F", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new roombooking ID

DELIMITER $$

CREATE TRIGGER before_roombookings_insert
BEFORE INSERT
ON roombookings
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	DECLARE rentOfRoom INT;
	DECLARE days INT;
	
	SELECT CAST(SUBSTRING(MAX(RBID), 3, 3) AS UNSIGNED) INTO nextID FROM RoomBookings;
	
	IF nextID IS NULL
	THEN SET NEW.RBID = CONCAT("RB", 100);
	ELSE SET NEW.RBID = CONCAT("RB", nextID + 1);
	END IF;

	SELECT rent INTO rentOfRoom FROM Room WHERE RoomID = NEW.RoomID;
	SELECT DATEDIFF(NEW.EndDate, NEW.StartDate) INTO days;
	
	SET NEW.Price = rentOfRoom * days;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new area ID

DELIMITER $$

CREATE TRIGGER before_area_insert
BEFORE INSERT
ON area
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(ARID), 3, 3) AS UNSIGNED) INTO nextID FROM Area;
	
	IF nextID IS NULL
	THEN SET NEW.ARID = CONCAT("AR", 100);
	ELSE SET NEW.ARID = CONCAT("AR", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new shop ID

DELIMITER $$

CREATE TRIGGER before_shop_insert
BEFORE INSERT
ON shop
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(SHID), 3, 3) AS UNSIGNED) INTO nextID FROM Shop;
	
	IF nextID IS NULL
	THEN SET NEW.SHID = CONCAT("SH", 100);
	ELSE SET NEW.SHID = CONCAT("SH", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new payment ID

DELIMITER $$

CREATE TRIGGER before_shoprentpayment_insert
BEFORE INSERT
ON shoprentpayment
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(PayID), 4, 3) AS UNSIGNED) INTO nextID FROM ShopRentPayment;
	
	IF nextID IS NULL
	THEN SET NEW.PayID = CONCAT("Pay", 100);
	ELSE SET NEW.PayID = CONCAT("Pay", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new feedback ID

DELIMITER $$

CREATE TRIGGER before_feedback_insert
BEFORE INSERT
ON feedback
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(FDID), 3, 3) AS UNSIGNED) INTO nextID FROM Feedback;
	
	IF nextID IS NULL
	THEN SET NEW.FDID = CONCAT("FD", 100);
	ELSE SET NEW.FDID = CONCAT("FD", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new item ID

DELIMITER $$

CREATE TRIGGER before_itemsinshop_insert
BEFORE INSERT
ON itemsinshop
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(ItemID), 3, 3) AS UNSIGNED) INTO nextID FROM itemsinshop;
	
	IF nextID IS NULL
	THEN SET NEW.ItemID = CONCAT("IT", 100);
	ELSE SET NEW.ItemID = CONCAT("IT", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new shop receipt ID

DELIMITER $$

CREATE TRIGGER before_shopreceipt_insert
BEFORE INSERT
ON shopreceipt
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(SRID), 3, 3) AS UNSIGNED) INTO nextID FROM shopreceipt;
	
	IF nextID IS NULL
	THEN SET NEW.SRID = CONCAT("SR", 100);
	ELSE SET NEW.SRID = CONCAT("SR", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new tool ID

DELIMITER $$

CREATE TRIGGER before_tool_insert
BEFORE INSERT
ON tool
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(TID), 2, 3) AS UNSIGNED) INTO nextID FROM tool;
	
	IF nextID IS NULL
	THEN SET NEW.TID = CONCAT("T", 100);
	ELSE SET NEW.TID = CONCAT("T", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new tool repair history ID

DELIMITER $$

CREATE TRIGGER before_toolrepairhistory_insert
BEFORE INSERT
ON toolrepairhistory
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(TRID), 3, 3) AS UNSIGNED) INTO nextID FROM toolrepairhistory;
	
	IF nextID IS NULL
	THEN SET NEW.TRID = CONCAT("TR", 100);
	ELSE SET NEW.TRID = CONCAT("TR", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Trigger for auto generating new tool repair history ID

DELIMITER $$

CREATE TRIGGER before_foodbookings_insert
BEFORE INSERT
ON foodbookings
FOR EACH ROW
BEGIN
	DECLARE nextID INT;
	
	SELECT CAST(SUBSTRING(MAX(FBID), 3, 3) AS UNSIGNED) INTO nextID FROM foodbookings;
	
	IF nextID IS NULL
	THEN SET NEW.FBID = CONCAT("FB", 100);
	ELSE SET NEW.FBID = CONCAT("FB", nextID + 1);
	END IF;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------

// Calculating rent of a room while inserting booking request

DELIMITER $$

CREATE TRIGGER before_RoomBookings_insert
BEFORE INSERT
ON RoomBookings 
FOR EACH ROW
BEGIN
	DECLARE rentOfRoom INT;
	DECLARE days INT;

	SELECT rent INTO rentOfRoom FROM Room WHERE RoomID = NEW.RoomID;
	SELECT DATEDIFF(NEW.EndDate, NEW.StartDate) INTO days;
	
	SET NEW.Price = rentOfRoom * days;
END $$

DELIMITER ;

---------------------------------------------------------------------------------------------------
// Staff Duty roster procedure

CALL generateStaffRoster ("GH100", curdate());

DELIMITER $$

CREATE PROCEDURE generateStaffRoster (IN GHID_t VARCHAR(20), IN curday DATE)
BEGIN
	DECLARE excludeDayForCHS INT;
	DECLARE excludeDay1ForReg INT;
	DECLARE excludeDay2ForReg INT;	
	DECLARE tempDate DATE;	
	DECLARE endDate DATE;
	DECLARE chsID1 VARCHAR(20);
	DECLARE chsID2 VARCHAR(20);
	DECLARE regID1 VARCHAR(20);
	DECLARE regID2 VARCHAR(20);
	DECLARE clrID1 VARCHAR(20);
	DECLARE clrID2 VARCHAR(20);
	DECLARE helID1 VARCHAR(20);
	DECLARE helID2 VARCHAR(20);
	DECLARE c INT;
	DECLARE tempShiftID VARCHAR(100);

	SET c = 0;

	WHILE DAYOFWEEK(curday) != 1 DO
	  SET curday = DATE_ADD(curday, INTERVAL 1 DAY);
	END WHILE;

	SELECT FLOOR(RAND()*(7) + 1) INTO excludeDayForCHS;
	SELECT FLOOR(RAND()*(7) + 1) INTO excludeDay1ForReg;
	SELECT FLOOR(RAND()*(7) + 1) INTO excludeDay2ForReg;
	
	IF excludeDayForCHS = 8 THEN SET excludeDayForCHS = 7;
	END IF;
	IF excludeDay1ForReg = 8 THEN SET excludeDay1ForReg = 7;
	END IF;
	IF excludeDay2ForReg = 8 THEN SET excludeDay2ForReg = 7;
	END IF;
	
	IF excludeDay1ForReg = excludeDay2ForReg AND excludeDay1ForReg = 7 THEN
	  SET excludeDay2ForReg = 6;
	ELSEIF excludeDay1ForReg = excludeDay2ForReg THEN
	  SET excludeDay2ForReg = excludeDay1ForReg + 1;
	END IF;

	CREATE TEMPORARY TABLE chsStaff (chsSTID VARCHAR(20));
	INSERT INTO chsStaff SELECT STID FROM Staff WHERE SType = "chscook";
	
	CREATE TEMPORARY TABLE regStaff (regSTID VARCHAR(20));
	INSERT INTO regStaff SELECT STID FROM Staff WHERE SType = "regcook";

	CREATE TEMPORARY TABLE clrStaff (clrSTID VARCHAR(20));
	INSERT INTO clrStaff SELECT STID FROM Staff WHERE SType = "cleaner";

	CREATE TEMPORARY TABLE helStaff (helSTID VARCHAR(20));
	INSERT INTO helStaff SELECT STID FROM Staff WHERE SType = "cookhelper";
	
	SELECT chsSTID INTO chsID1 FROM chsStaff LIMIT 0,1;
	SELECT chsSTID INTO chsID2 FROM chsStaff LIMIT 1,1;
	SELECT regSTID INTO regID1 FROM regStaff LIMIT 0,1;
	SELECT regSTID INTO regID2 FROM regStaff LIMIT 1,1;
	SELECT clrSTID INTO clrID1 FROM clrStaff LIMIT 0,1;
	SELECT clrSTID INTO clrID2 FROM clrStaff LIMIT 1,1;
	SELECT helSTID INTO helID1 FROM helStaff LIMIT 0,1;
	SELECT helSTID INTO helID2 FROM helStaff LIMIT 1,1;

	SET tempDate = curday;
	SET endDate = DATE_ADD(curday, INTERVAL 7 DAY);

	WHILE tempDate < endDate DO
	  IF DAYOFWEEK(tempDate) = excludeDayForCHS THEN
	    INSERT INTO staffdutyroster VALUES (tempDate, GHID_t, chsID2, chsID2 );
	  ELSE 
	    INSERT INTO staffdutyroster VALUES (tempDate, GHID_t, chsID1, chsID1 );
	  END IF;

	SET tempDate = DATE_ADD(tempDate, INTERVAL 1 DAY);
	END WHILE;

	SET tempDate = curday;
	SET endDate = DATE_ADD(curday, INTERVAL 7 DAY);

	WHILE c < 5 AND tempDate < endDate DO
	  SELECT Shift_1 INTO tempShiftID FROM staffdutyroster WHERE Date = tempDate; 
	  IF tempShiftID = chsID2 THEN
	    SET c = c-1;
	  ELSE
	    UPDATE staffdutyroster SET Shift_1 = CONCAT(Shift_1, chsID2) WHERE Date = tempDate;
	    UPDATE staffdutyroster SET Shift_2 = CONCAT(Shift_2, chsID2) WHERE Date = tempDate;
	  END IF;
	SET c = c + 1;
	SET tempDate = DATE_ADD(tempDate, INTERVAL 1 DAY);
	END WHILE;

	SET tempDate = curday;
	SET endDate = DATE_ADD(curday, INTERVAL 7 DAY);

	WHILE tempDate < endDate DO
	  IF DAYOFWEEK(tempDate) = excludeDay1ForReg OR DAYOFWEEK(tempDate) = excludeDay2ForReg THEN
	    UPDATE staffdutyroster SET Shift_1 = CONCAT(Shift_1, regID2) WHERE Date = tempDate;
	    UPDATE staffdutyroster SET Shift_2 = CONCAT(Shift_2, regID2) WHERE Date = tempDate;
	  ELSE 
	    UPDATE staffdutyroster SET Shift_1 = CONCAT(Shift_1, regID1) WHERE Date = tempDate;
	    UPDATE staffdutyroster SET Shift_2 = CONCAT(Shift_2, regID1) WHERE Date = tempDate;
	  END IF;

	SET tempDate = DATE_ADD(tempDate, INTERVAL 1 DAY);
	END WHILE;

	SET tempDate = curday;
	SET endDate = DATE_ADD(curday, INTERVAL 7 DAY);
	SET c = 0;

	WHILE c < 3 AND tempDate < endDate DO
	  SELECT Shift_1 INTO tempShiftID FROM staffdutyroster WHERE Date = tempDate; 
	  IF SUBSTRING(tempShiftID, LENGTH(tempShiftID)-4, 5) = regID2 THEN
	    SET c = c-1;
	  ELSE
	    UPDATE staffdutyroster SET Shift_1 = CONCAT(Shift_1, regID2) WHERE Date = tempDate;
	    UPDATE staffdutyroster SET Shift_2 = CONCAT(Shift_2, regID2) WHERE Date = tempDate;
	  END IF;
	SET c = c + 1;
	SET tempDate = DATE_ADD(tempDate, INTERVAL 1 DAY);
	END WHILE;

	SET tempDate = curday;
	SET endDate = DATE_ADD(curday, INTERVAL 7 DAY);

	WHILE tempDate < endDate DO
	  IF FLOOR(RAND()*(2) + 1) = 1 THEN
	    UPDATE staffdutyroster SET Shift_1 = CONCAT(Shift_1, clrID1) WHERE Date = tempDate;
	  ELSE 
	    UPDATE staffdutyroster SET Shift_2 = CONCAT(Shift_2, clrID1) WHERE Date = tempDate;
	  END IF;

	SET tempDate = DATE_ADD(tempDate, INTERVAL 1 DAY);
	END WHILE;

	SET tempDate = curday;
	SET endDate = DATE_ADD(curday, INTERVAL 7 DAY);

	WHILE tempDate < endDate DO
	  SELECT Shift_1 INTO tempShiftID FROM staffdutyroster WHERE Date = tempDate; 
	  IF LOCATE(clrID1, tempShiftID) = 0 THEN
	    UPDATE staffdutyroster SET Shift_1 = CONCAT(Shift_1, clrID2) WHERE Date = tempDate;
	  ELSE 
	    UPDATE staffdutyroster SET Shift_2 = CONCAT(Shift_2, clrID2) WHERE Date = tempDate;
	  END IF;

	SET tempDate = DATE_ADD(tempDate, INTERVAL 1 DAY);
	END WHILE;

	SET tempDate = curday;
	SET endDate = DATE_ADD(curday, INTERVAL 7 DAY);

	WHILE tempDate < endDate DO
	  IF FLOOR(RAND()*(2) + 1) = 1 THEN
	    UPDATE staffdutyroster SET Shift_1 = CONCAT(Shift_1, helID1) WHERE Date = tempDate;
	  ELSE 
	    UPDATE staffdutyroster SET Shift_2 = CONCAT(Shift_2, helID1) WHERE Date = tempDate;
	  END IF;

	SET tempDate = DATE_ADD(tempDate, INTERVAL 1 DAY);
	END WHILE;

	SET tempDate = curday;
	SET endDate = DATE_ADD(curday, INTERVAL 7 DAY);

	WHILE tempDate < endDate DO
	  SELECT Shift_1 INTO tempShiftID FROM staffdutyroster WHERE Date = tempDate; 
	  IF LOCATE(helID1, tempShiftID) = 0 THEN
	    UPDATE staffdutyroster SET Shift_1 = CONCAT(Shift_1, helID2) WHERE Date = tempDate;
	  ELSE 
	    UPDATE staffdutyroster SET Shift_2 = CONCAT(Shift_2, helID2) WHERE Date = tempDate;
	  END IF;

	SET tempDate = DATE_ADD(tempDate, INTERVAL 1 DAY);
	END WHILE;
	
	DROP TABLE chsStaff;
	DROP TABLE regStaff;
	DROP TABLE clrStaff;
	DROP TABLE helStaff;
	
END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Procedure for logging data into staffdutylog and deleting it from staffdutyroster

DELIMITER $$

CREATE PROCEDURE logSchedule ()
BEGIN
	INSERT INTO StaffDutyLog SELECT * FROM staffdutyroster;
	DELETE FROM staffdutyroster;
END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Procedure for extending license

DELIMITER $$

CREATE PROCEDURE extendLicense (IN SKID_t VARCHAR(20), IN extPeriod INT)
BEGIN
	UPDATE shopownership SET ExtensionPeriod = extPeriod, ExtensionRequested = false WHERE SKID = SKID_t;
	UPDATE shopkeeper SET LPReminder = false WHERE SKID = SKID_t;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Procedure for adding receipt and calculating cost

DELIMITER $$

CREATE PROCEDURE addReceipt (IN itemID_t VARCHAR(20), IN shopID_t VARCHAR(20), IN CID_t VARCHAR(20), IN quantity_t INT, IN purchaseDate_t DATE)
BEGIN
	DECLARE costOfItem INT;

	SELECT Price INTO costOfItem FROM itemsinshop WHERE ItemID = itemID_t AND SHID = shopID_t;
	
	SET costOfItem = costOfItem * quantity_t;

	INSERT INTO shopreceipt (CID, SHID, ItemID, PurchaseDate, Quantity, Cost ) VALUES (CID_t, shopID_t, itemID_t, purchaseDate_t, quantity_t, costOfItem);

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// function to check if extension request has been placed

DELIMITER $$

CREATE FUNCTION hasPlacedExtensionRequest (email_t VARCHAR(50))
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
	DECLARE extReq BOOLEAN;

	DECLARE SKID_t VARCHAR(20);

	SELECT SKID INTO SKID_t FROM shopkeeper WHERE Email = email_t;

	SELECT ExtensionRequested INTO extReq FROM shopownership WHERE SKID = SKID_t;

	RETURN extReq;
END$$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// function to get rating of a shop

DELIMITER $$

CREATE FUNCTION getRating (SHID_t VARCHAR(20))
RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE rating INT;
	DECLARE i INT;
	DECLARE n INT;
	DECLARE tempSHID VARCHAR(20);
	DECLARE tempFDID VARCHAR(20);
	DECLARE matchCount INT;
	DECLARE sumOfRatings INT;
	DECLARE tempSum INT;
	

	SET i = 0;
	SET n = 0;
	SET matchCount = 0;
	SET sumOfRatings = 0;
	SET tempSum = 0;
	
	SET rating = -1;

	SELECT COUNT(*) INTO n FROM feedback;

	WHILE i<n DO
	   SELECT SHID INTO tempSHID FROM feedback ORDER BY FDID LIMIT i,1;
	   SELECT FDID INTO tempFDID FROM feedback ORDER BY FDID LIMIT i,1;
	   
           IF tempSHID = SHID_t THEN
	      	SET matchCount = matchCount + 1;
    		SELECT R1+R2+R3 INTO tempSum FROM Feedback WHERE FDID = tempFDID;
		SET sumOfRatings = sumOfRatings + tempSum;
	   END IF;
	   SET i = i+1;
	END WHILE;
	
	IF matchCount != 0 THEN
	SET rating = sumOfRatings / (matchCount * 3);
	END IF;

	RETURN rating;
END$$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// function to get total sales

DELIMITER $$

CREATE FUNCTION getTotalSales (SHID_t VARCHAR(20))
RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE i INT;
	DECLARE n INT;

	DECLARE tempSHID VARCHAR(20);
	DECLARE tempCost INT;
	DECLARE totalSales INT;

	SET i = 0;
	SET n = 0;
	SET tempCost = 0;
	SET totalSales = 0;

	SELECT COUNT(*) INTO n FROM shopreceipt;

	WHILE i<n DO
	   SELECT SHID INTO tempSHID FROM shopreceipt ORDER BY SRID LIMIT i,1;
	   SELECT Cost INTO tempCost FROM shopreceipt ORDER BY SRID LIMIT i,1;
	   
           IF tempSHID = SHID_t THEN
		SET totalSales = totalSales + tempCost;
	   END IF;
	   SET i = i+1;
	END WHILE;

	RETURN totalSales;
END$$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Procedure for ordering food

DELIMITER $$

CREATE PROCEDURE orderFood(IN FID_t VARCHAR(20), IN quantity_t INT, IN email_t VARCHAR(50))
BEGIN
	DECLARE orderPrice_t INT;
	DECLARE GID_t VARCHAR(20);
	DECLARE FName_t VARCHAR(50);
	
	SELECT Price INTO orderPrice_t FROM Food WHERE FID = FID_t;
	SELECT FName INTO FName_t FROM Food WHERE FID = FID_t;
	
	SET orderPrice_t = orderPrice_t * quantity_t;

	SELECT GID INTO GID_t FROM Guest WHERE Email = email_t;

	INSERT INTO FoodBookings (GID, FID, FName, Quantity, OrderPrice, DateOfOrder) VALUES (GID_t, FID_t, FName_t, quantity_t, orderPrice_t, curdate());
END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Procedure for dumping gardener duties

DELIMITER $$

CREATE PROCEDURE saveGardenerDutyHistory()
BEGIN
	INSERT INTO duty_history SELECT * FROM Duty;
	DELETE FROM Duty;
END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Procedure for assigning tool to mechanic

DELIMITER $$

CREATE PROCEDURE assignToolToMechanic(IN TID_t VARCHAR(20), IN MID_t VARCHAR(20), IN Date_t DATE)
BEGIN
	INSERT INTO ToolRepairing VALUES (TID_t, MID_t, Date_t);
	UPDATE tool SET Status = "R" WHERE TID = TID_t;
END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Procedure for gardener to use tool

DELIMITER $$

CREATE PROCEDURE setGardenerTool(IN TID_t VARCHAR(20), IN email_t VARCHAR(20))
BEGIN
	DECLARE GDID_t VARCHAR(20);

	SELECT GDID INTO GDID_t FROM Gardener WHERE email = email_t;
	INSERT INTO ToolUsing VALUES (TID_t, GDID_t, curdate());
	UPDATE tool SET Status = "W" WHERE TID = TID_t;
END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Procedure for gardener to return tool

DELIMITER $$

CREATE PROCEDURE returnTool(IN TID_t VARCHAR(20))
BEGIN
	DELETE FROM ToolUsing WHERE TID = TID_t;
	UPDATE tool SET Status = "A" WHERE TID = TID_t;
END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Procedure for mechanic to mark tool as repaired

DELIMITER $$

CREATE PROCEDURE markToolAsRepaired(IN TID_t VARCHAR(20), IN MID_t VARCHAR(20), IN Date_t DATE, IN amount_t INT)
BEGIN
	INSERT INTO ToolRepairHistory (TID, MID, DateFinished, Amount) VALUES (TID_t, MID_t, Date_t, amount_t);
	UPDATE tool SET Status = "A" WHERE TID = TID_t;
	DELETE FROM ToolRepairing WHERE TID = TID_t AND MID = MID_t;
END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
// Procedure for getting monthly salary of workers

delimiter $$
create procedure get_salary(in y int,in m int,in price int)
begin
 select GDID,sum(dutyTime)*price as salary from Duty_history where year(DateofDuty)=y and month(DateofDuty)=m and Status='P' group by GDID ;
end;
$$
delimiter ;
---------------------------------------------------------------------------------------------------
// Procedure for logging staff schedule in staffdutylog

DELIMITER $$

CREATE PROCEDURE logStaffSchedule()
BEGIN
	INSERT INTO StaffDutyLog SELECT * FROM staffdutyroster;

	DELETE FROM staffdutyroster;

END $$

DELIMITER ;
---------------------------------------------------------------------------------------------------
Potential queries
=================

-----------------------------------------------END-------------------------------------------------